# imports
/^from flexmock import flexmock$/ {
s/mock//g
a\
from flex import fake
}
/^from flexmock import/ s//from flex import/

# special functions
s/flexmock_teardown/verify/g

# strip whitespace
s/flexmock[ \t]*([ \t]*/flexmock(/
s/\.should_receive[ \t]*([ \t]*/.should_receive(/
s/\.should_call[ \t]*([ \t]*/.should_call(/
s/\.new_instances[ \t]*([ \t]*/.new_instances(/
s/\.with_args[ \t]*([ \t]*/.with_args(/
s/\.and_return[ \t]*([ \t]*/.and_return(/
s/\.and_raise[ \t]*([ \t]*/.and_raise(/
s/\.and_yield[ \t]*([ \t]*/.and_yield(/
s/\.times[ \t]*([ \t]*/.times(/
s/\.at_least[ \t]*([ \t]*/.at_least(/
s/\.at_most[ \t]*([ \t]*/.at_most(/

# ignore leading comments
/^[ \t]*#/ t

# unbreak lines in flexmock calls
/flexmock($/ b unbreak
/flexmock(.*[^)]$/ {
  :unbreak
  # skip if the line ends in one of them
  /\.once$/ t unbroke
  /\.twice$/ t unbroke
  /\.never$/ t unbroke
  /\.mock$/ t unbroke
  N
  s/\n[ \t]*//
  /[^)]$/ b unbreak
  :unbroke
}

# convert to appropriate flex/fake call
/flexmock([ \t]*[a-zA-Z]*[a-zA-Z0-9]*[ \t]*)/ s/flexmock/flex/
/flexmock([ \t]*[a-zA-Z]*[a-zA-Z0-9]*[ \t]*,/ s/flexmock/flex/
/flexmock([ \t]*[a-zA-Z]*[a-zA-Z0-9]*[ \t]*=/ s/flexmock/fake/

# main
/flex(/ {
  # normalize order
  s/\(.*\.should_receive([^)]*)\)\(.*\)\(.with_args([^)]*)\)/\1\3\2/
  s/\(.*\.should_call([^)]*)\)\(.*\)\(.with_args([^)]*)\)/\1\3\2/

  # strip off should_receive
  /\.should_receive(/ {
    s/\.should_receive([']\([^']*\)['])/.\1/
    s/\.should_receive(["]\([^"]*\)["])/.\1/

    # convert replace_with
    s/\.replace_with/runs/

  }

  # special handling for should_call since we need to insert runs() after args
  /\.should_call(/ {
    /\.with_args(/ {
      s/\.with_args\(([^)]*)\)/\1.runs()/
      b skipargs
    }
    s/\.should_call(['"]\([^)]*\)['"])/.\1.runs()/
    :skipargs
    s/\.should_call([']\([^']*\)['])/.\1/
    s/\.should_call(["]\([^"]*\)["])/.\1/
  }

  # handle new_instances()
  /\.new_instances(/ {
    s/\.new_instances(\([^)]*\))/.__new__.returns(\1)/
  }

  # strip off with_args
  s/\.with_args//

  # replace and_returns
  s/\.and_return/.returns/g

  # replace and_raise
  s/\.and_raise/.raises/g

  # replace and_yield
  s/\.and_yields/.yields/g

  # once
  s/\.once()/.once/
  s/\.once/.times(1)/

  # twice
  s/\.twice()/.twice/
  s/\.twice/.times(2)/

  # never
  s/\.never()/.never/
  s/\.never/.times(0)/

  # ensure mock has parens
  s/\.mock()/.mock/
  s/\.mock/.mock()/
}
