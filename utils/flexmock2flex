# Converts a Python test file from flexmock to flex.
# This script is likely not perfect, and in particular assumes
# valid flexmock syntax, such that I could think of. Flexmock
# syntax is rather loose so it's quite possible I missed something.
#
# Tested with BSD and GNU versions of sed.
#
# Usage:
#
#     $ sed -f this_file test_file.py
#
# If you're really brave (or use git) run sed -i
# to update the file in-place. Otherwise redirect to a new
# file and do a diff first to make sure everything is sane.

# fix imports
/^from flexmock import flexmock$/ {
s/mock//g
a\
from flex import fake
}
/^from flexmock import/ s//from flex import/

# fix special functions (if any are imported)
s/flexmock_teardown/verify/g

# strip whitespace
s/flexmock[ \t]*([ \t]*/flexmock(/
s/\.should_receive[ \t]*([ \t]*/.should_receive(/
s/\.should_call[ \t]*([ \t]*/.should_call(/
s/\.new_instances[ \t]*([ \t]*/.new_instances(/
s/\.with_args[ \t]*([ \t]*/.with_args(/
s/\.and_return[ \t]*([ \t]*/.and_return(/
s/\.and_raise[ \t]*([ \t]*/.and_raise(/
s/\.and_yield[ \t]*([ \t]*/.and_yield(/
s/\.times[ \t]*([ \t]*/.times(/
s/\.at_least[ \t]*([ \t]*/.at_least(/
s/\.at_most[ \t]*([ \t]*/.at_most(/

# ignore leading comments
/^[ \t]*#/ t

# unbreak lines in flexmock calls
/flexmock($/ b unbreak
/flexmock(.*[^)]$/ {
  :unbreak
  # skip if the line ends in one of them
  /\.once$/ t unbroke
  /\.twice$/ t unbroke
  /\.never$/ t unbroke
  /\.mock$/ t unbroke
  N
  s/\n[ \t]*//
  /[^)]$/ b unbreak
  :unbroke
}

# convert to appropriate flex/fake call
/flexmock([ \t]*[a-zA-Z]*[a-zA-Z0-9]*[ \t]*)/ s/flexmock/flex/
/flexmock([ \t]*[a-zA-Z]*[a-zA-Z0-9]*[ \t]*,/ s/flexmock/flex/
/flexmock([ \t]*[a-zA-Z]*[a-zA-Z0-9]*[ \t]*=/ s/flexmock/fake/

# normalize times
s/\.once()/.once/
s/\.once/.times(1)/
s/\.twice()/.twice/
s/\.twice/.times(2)/
s/\.never()/.never/
s/\.never/.times(0)/

# sort out times modifiers
/\.at_least\..*\.at_most\./ {
  s/\.times(\([^)]*\))\(.*\)\.times(\([^)]*\))/.times(\1, \3)\2/
  s/\.at_least//
  s/\.at_most//
}
/\.at_least\./ {
  s/\.times(\([^)]*\))/.times(\1, None)/
  s/\.at_least//
}
/\.at_most\./ {
  s/\.times(\([^)]*\))/.times(0, \1)/
  s/\.at_most//
}

# ensure when() is at the end
s/\(.*\)\(\.when([^)]*)\)\(.*\)/\1\3\2/

# ensure times is even further at the end
s/\(.*\)\(\.times([^)]*)\)\(.*\)/\1\3\2/

# ensure with_args immediately follows should_receive/should_call
s/\(.*\.should_receive([^)]*)\)\(.*\)\(.with_args([^)]*)\)/\1\3\2/
s/\(.*\.should_call([^)]*)\)\(.*\)\(.with_args([^)]*)\)/\1\3\2/

# silly hack to only match legit flexmock calls (hopefully)
/flex(/ b main
/\.should_receive(/ b main
/\.should_call(/ b main
/\.new_instances(/ b main

/^$/ {
  :main
  # strip off should_receive
  /\.should_receive(/ {
    s/\.should_receive([']\([^']*\)['])/.\1/
    s/\.should_receive(["]\([^"]*\)["])/.\1/

    # convert replace_with
    s/\.replace_with/runs/

  }

  # special handling for should_call since we need to insert runs() after args
  /\.should_call(/ {
    /\.with_args(/ {
      s/\.with_args\(([^)]*)\)/\1.runs()/
      b skipargs
    }
    s/\.should_call(['"]\([^)]*\)['"])/.\1.runs()/
    :skipargs
    s/\.should_call([']\([^']*\)['])/.\1/
    s/\.should_call(["]\([^"]*\)["])/.\1/
  }

  # handle new_instances()
  /\.new_instances(/ {
    s/\.new_instances(\([^)]*\))/.__new__.returns(\1)/
  }

  # strip off with_args
  s/\.with_args//

  # replace and_returns
  s/\.and_return/.returns/g

  # replace and_raise
  s/\.and_raise/.raises/g

  # replace and_yield
  s/\.and_yields/.yields/g

  # ensure mock has no parens
  s/\.mock()/.mock/

  # ensure ordered() has parens
  s/\.ordered()/.ordered/
  s/\.ordered/.ordered()/

  # get rid of one_by_one (it's the default now)
  s/\.one_by_one()//
  s/\.one_by_one//
}
